# -*- coding: utf-8 -*-
"""gojek.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bl4E3Lj4la3tjqFbcOI2mkLIPj1xoNa9
"""

# Twitter auth token
twitter_auth_token = '7e97a1752369bf080918137d0bc674477a03dd34'

# Import required Python package
!pip install pandas

# Install Node.js (because tweet-harvest built using Node.js)
!sudo apt-get update
!sudo apt-get install -y ca-certificates curl gnupg
!sudo mkdir -p /etc/apt/keyrings
!curl -fsFL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg

!NODE_MAJOR=20 && echo "deb [signed-by-etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list

!sudo apt-get update
!sudp apt-get install nodejs -y

!node -v

# Scrap data
  filename = 'gojek.csv'
  search_keyword = 'gojek since:2025-01-01 until:2025-04-01 lang:id'
  limit = 100

  !npx -y tweet-harvest@2.6.1 -o "{filename}" -s "{search_keyword}" --tab "LATEST" -l {limit} --token {twitter_auth_token}

import pandas as pd

# Specify the path to the CSV file
file_path = f"tweets-data/{filename}"

# Read the CSV file into a pandas DataFrame
df = pd.read_csv(file_path, delimiter=",")

# Display the DataFrame
display(df)

# Data counts
num_tweets = len(df)
print(f"Number of tweets: {num_tweets}")

# Install visualization libraries
!pip install matplotlib seaborn

# Import necessary libraries
import matplotlib.pyplot as plt
import seaborn as sns

# Convert created_at to datetime
df['created_at'] = pd.to_datetime(df['created_at'], errors='coerce')

# Count tweets per hour (or day)
tweet_by_time = df['created_at'].dt.floor('H').value_counts().sort_index()

# Line chart: Tweets over time
plt.figure(figsize=(12, 6))
tweet_by_time.plot(kind='line', marker='o')
plt.title('Tweet Frequency Over Time')
plt.xlabel('Time')
plt.ylabel('Number of Tweets')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Sort tweets by favorite_count and display top 10
top_fav = df.sort_values('favorite_count', ascending=False).head(10)

plt.figure(figsize=(10,6))
sns.barplot(data=top_fav, x='favorite_count', y='full_text', palette='viridis')
plt.title('Top 10 Tweets by Favorite Count')
plt.xlabel('Favorite Count')
plt.ylabel('Tweet Text')
plt.tight_layout()
plt.show()

from collections import Counter
hashtags = df['full_text'].str.findall(r'#\w+').explode()
top_hashtags = hashtags.value_counts().head(10)

import matplotlib.pyplot as plt
import seaborn as sns

# Optional: reset plotting style
sns.set(style="whitegrid")

# Convert to DataFrame for easier plotting
top_hashtags_df = top_hashtags.reset_index()
top_hashtags_df.columns = ['Hashtag', 'Count']

# Plot
plt.figure(figsize=(10, 6))
sns.barplot(data=top_hashtags_df, y='Hashtag', x='Count', palette='crest')

plt.title('Top 10 Hashtags in Tweets')
plt.xlabel('Count')
plt.ylabel('Hashtag')
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Prepare data
engagement_df = df[['retweet_count', 'reply_count', 'favorite_count']]

# Plot
plt.figure(figsize=(10, 6))
sns.boxplot(data=engagement_df, palette='pastel')
plt.title('Distribution of Engagement Metrics')
plt.ylabel('Count')
plt.xlabel('Engagement Type')
plt.tight_layout()
plt.show()

# Ensure 'created_at' is datetime
df['created_at'] = pd.to_datetime(df['created_at'], errors='coerce')

# Group by day and compute average
engagement_time = df.set_index('created_at')[['retweet_count', 'reply_count', 'favorite_count']]
daily_avg = engagement_time.resample('D').mean()

# Plot
plt.figure(figsize=(12, 6))
daily_avg.plot(marker='o', linewidth=1.5)
plt.title('Average Engagement Over Time')
plt.xlabel('Date')
plt.ylabel('Average Count')
plt.legend(title='Engagement Type')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

df['hour'] = df['created_at'].dt.hour
plt.figure(figsize=(10,5))
sns.countplot(x='hour', data=df, palette='viridis')
plt.title('Tweet Frequency by Hour')
plt.xlabel('Hour of Day')
plt.ylabel('Tweet Count')
plt.tight_layout()
plt.show()



from wordcloud import WordCloud

all_text = ' '.join(df['full_text'].dropna().astype(str))
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_text)

plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Most Frequent Words in Gojek Tweets')
plt.show()